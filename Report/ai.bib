@book{Tzeng1988,
address = "Berlin; New York",
author = "Tzeng, Chun-Hung",
isbn = 0387186654,
publisher = "Springer-Verlag",
title = "A Theory of Heuristic Information in Game-Tree Search",
year = 1988
}

@article{Adam2001,
author = "Adam, Klaus",
doi = "10.1006/jeth.2000.2723",
issn = 00220531,
journal = "Journal of Economic Theory",
month = nov,
number = 1,
pages = {252--280},
title = "Learning while searching for the best alternative",
url = {http://linkinghub.elsevier.com/retrieve/pii/S0022053100927236 http://www.sciencedirect.com/science/article/pii/S0022053100927236},
volume = 101,
year = 2001
}

@inproceedings{Greene1991,
address = {Auburn, AL},
author = {Greene, William A.},
booktitle = {Proceedings of the 29th Annual ACM Southeast Regional Conference},
month = apr,
pages = {3--8},
title = "Machine Learning of Othello Heuristics",
url = {http://www.cs.uno.edu/people/faculty/bill/ML-Othello-Heuristics-ACM-SE-Regl-1991.pdf},
year = {1991}
}
@phdthesis{Allis1994,
author = {Allis, Louis Victor},
doi = {10.1.1.99.5364},
isbn = {90-9007488-0},
keywords = {artificial intelligence,games,search},
pages = {207},
school = {Maastricht University},
title = "Searching for solutions in games and artificial intelligence",
url = {http://pudn.ganjiyo.com/:read/downloads13/doc/52132/thesis.pdf},
year = {1994}
}
@techreport{Brockington1997,
abstract = {This paper describes the inner workings of Keyano, a competitive Othello program that has achieved many top-three finishes in tournament play over the last five years. The unique features of Keyano's midgame search routine, evaluation function and opening book are described in this paper.},
address = {Edmonton, Alberta, Canada},
author = {Brockington, Mark G.},
doi = {10.1.1.49.2672},
institution = {The University of Alberta},
number = {June},
pages = {19},
title = "Keyano unplugged - The construction of an {Othello} program",
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.2672\&amp;rep=rep1\&amp;type=pdf},
year = {1997}
}
@article{Patashnik1980,
author = {Patashnik, Oren},
journal = {Mathematics Magazine},
keywords = {ai,game tree,games},
number = {4},
pages = {202--216},
title = "Qubic: 4x4x4 Tic-Tac-Toe",
url = {http://www.jstor.org/stable/2689613 },
volume = {53},
year = {1980}
}
@inproceedings{Baxter1997,
abstract = {In this paper we present TDLeaf($\lambda$), a variation on the TD($\lambda$) algorithm that enables it to be used in conjunction with minimax search. We present some ex- periments in which our chess program, “KnightCap,” used TDLeaf($\lambda$) to learn its evaluation function while playing on the Free Ineternet Chess Server (FICS, fics.onenet.net). It improved from a 1650 rating to a 2100 rating in just 308 games and 3 days of play. We discuss some of the reasons for this success and also the relationship between our results and Tesauro’s results in backgammon.},
author = "Baxter, Jonathan and Tridgell, Andrew and Weaver, Lex",
booktitle = "Proceedings of the 15th International Conference on Machine Learning",
doi = "10.1.1.140.2003",
keywords = {chess,game trees,machine learning,static evaluation,temporal difference learning},
mendeley-tags = {chess,game trees,machine learning,static evaluation,temporal difference learning},
pages = {28--36},
publisher = {Morgan Kaufmann},
title = "{KnightCap}: A chess program that learns by combining {TD($\lambda$)}
	with minimax search",
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.140.2003},
year = 1997
}

@techreport{Bogenschutz2010,
abstract = {This paper will discuss how we implementated an intelligent game of 3D tic-tac-toe in C++ using the minimax algorithm and alpha-beta prunting.},
address = {Ripon},
author = {Bogenschutz, Bradley D.},
booktitle = {Computer},
institution = {Ripon College},
keywords = {alpha-beta pruning,artificial intelligence,heuristic,minimax,ply},
number = {May},
pages = {5--8},
title = "Artificial Intelligence: Implementing {3D} Tic-Tac-Toe in {C++}",
url = {http://www.ripon.edu/ACADEMICS/macs/summation/2010/articles/B. Bogenschutz - 3D TTT in C++.pdf},
year = {2010}
}
@article{Irving2000,
abstract = {Using full-game databases and optimized tree-search algorithms, the game of Kalah is solved for several starting configurations up to 6 holes and 5 counters per hole. The main search algorithm used was iterative-deepening MTD(f). Major search enhancements were move ordering, transposition tables, futility pruning, enhanced transposition cut-off, and endgame databases.},
author = {Irving, Geoffrey and Donkers, Jeroen and Uiterwijk, Jos},
journal = {ICGA Journal},
number = {3},
pages = {139--147},
title = "Solving {Kalah}",
url = {http://www.fdg.unimaas.nl/educ/donkers/pdf/kalah.pdf},
volume = {23},
year = {2000}
}
